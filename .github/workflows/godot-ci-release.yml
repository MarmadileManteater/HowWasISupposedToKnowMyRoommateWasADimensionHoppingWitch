name: "godot-ci release"
on: workflow_dispatch

env:
  GODOT_VERSION: 3.5.1
  EXPORT_NAME: HowWasISupposedToKnowMyRoommateWasADimensionHoppingWitch
  PROJECT_PATH: ./
  
jobs:
  build:
    name: Export
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: true
          
      - name: üç∑ Setup WINE
        id: wine_install
        run: |
          sudo apt-get install wine
          echo "WINE_PATH=$(which wine64)" >> $GITHUB_OUTPUT

      - name: Get tag from version
        id: tag_version
        run: |
            echo "TAG_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: üì§ Export game
        id: export
        # Use latest version (see releases for all versions)
        uses: firebelley/godot-export@v4.7.0
        with:
          # Defining all the required inputs
          godot_executable_download_url: https://github.com/godotengine/godot/releases/download/3.5.1-stable/Godot_v3.5.1-stable_mono_linux_headless_64.zip
          godot_export_templates_download_url: https://github.com/godotengine/godot/releases/download/3.5.1-stable/Godot_v3.5.1-stable_mono_export_templates.tpz
          relative_project_path: ./
          archive_output: true
          export_debug: true
          wine_path: ${{ steps.wine_install.outputs.WINE_PATH }}
          
      - name: ü§ê Unzip build artifacts
        run: |
          mkdir ./artifacts
          unzip -qq ${{ steps.export.outputs.archive_directory }}/HTML5.zip -d ./artifacts/HTML5
          unzip -qq '${{ steps.export.outputs.archive_directory }}/Windows Desktop.zip' -d ./artifacts/Windows/
      
      - name: üöö Move license info into output directories
        run: |
          cp GODOT_LICENSE ./artifacts/HTML5/
          cp assets.md ./artifacts/HTML5/
          cp GODOT_LICENSE ./artifacts/Windows/
          cp assets.md ./artifacts/Windows/

      - name: ‚¨Ü Upload HTML5 Artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ env.EXPORT_NAME }}-HTML5
          path: ./artifacts/HTML5
          
      - name: ‚¨Ü Upload Windows Artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ env.EXPORT_NAME }}-Windows
          path: ./artifacts/Windows

      - name: ü§ê Zip up directories for release
        run: |
          zip -r ./Windows.zip ./artifacts/Windows
          zip -r ./HTML5.zip ./artifacts/HTML5

      - name: Create release body
        run: |
          echo "${{ github.event.head_commit.hash }}" >> release.txt
          echo "" >> release.txt
      
      - name: üìù Create Draft Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.head_commit.hash }}
          release_name: ${{ github.event.head_commit.hash }}
          draft: true
          prerelease: false
          body_path: release.txt

      - name: ‚¨Ü Upload Windows Artifact to Release
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Windows.zip
          asset_name: ${{ env.EXPORT_NAME }}-Windows
          asset_content_type: application/zip

      - name: ‚¨Ü Upload HTML5 Artifact to Release
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./HTML5.zip
          asset_name: ${{ env.EXPORT_NAME }}-HTML5
          asset_content_type: application/zip
